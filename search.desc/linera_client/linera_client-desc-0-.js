searchState.loadedDescShard("linera_client", 0, "This module provides a convenient library for writing a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nCloses the chain that was created for the benchmark.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a fungible token transfer operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates information related to one block per chain, up …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA <code>ChainListener</code> is a process that listens to notifications …\nWait after processing any notification (useful for rate …\nWait before processing any notification (useful for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new chain listener given client chains.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRuns the chain listener.\nDo not create blocks automatically to receive incoming …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nApplies the given function to the chain client.\nRetrieve the default account. Current this is the common …\nRetrieve the default chain.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nRemembers the new chain and private key (if any) in the …\nReturns a reference to the wallet.\nReturns the <code>WalletState</code> as a mutable reference.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nLink an owner with a key pair in the wallet to a chain …\nSend one transfer per chain in bulk mode\nChanges the application permissions configuration.\nChange who owns the chain, and how the owners work …\nCheck absence of a namespace in the database\nCheck existence of a namespace in the database\nClose an existing chain.\nCreate an application.\nCreate genesis configuration for a Linera deployment. …\nDelete all the namespaces in the database\nDelete a single namespace from the database\nExtract a Bash and GraphQL script embedded in a markdown …\nRun a GraphQL service that exposes a faucet where users …\nDeprecates all committees except the last one.\nAdd a new followed chain (i.e. a chain without keypair) to …\nForgets the specified chain, including the associated key …\nForgets the specified chain’s keys. The chain will still …\nPrint CLI help in Markdown format, and exit.\nPrint a bash helper script to make <code>linera net up</code> easier to …\nInitialize a wallet from the genesis configuration.\nInitialize a namespace in the database\nCreate an unassigned key pair.\nList the blob IDs in the database\nList the chain IDs in the database\nList the namespaces in the database\nRead the current native-token balance of the given account …\nManage a local Linera Network.\nCreate a new Linera project.\nOpen (i.e. activate) a new chain deriving the UID from an …\nOpen (i.e. activate) a new multi-owner chain deriving the …\nProcess all pending incoming messages from the inbox of …\nManage Linera projects.\nCreate an application, and publish the required module.\nBuild and publish a Linera project.\nPublish a data blob of binary data.\nPublish module.\nSimulate the execution of one block made of pending …\nShow the version and genesis config hash of a new …\nShow the current set of validators for a chain. Also print …\nVerify that a data blob is readable.\nRemove a validator (admin only)\nRequest a new chain from a faucet and add it to the wallet.\nView or update the resource control policy\nRetry a block we unsuccessfully tried to propose earlier.\nRun a GraphQL service to explore and extend the chains of …\nChange the wallet default chain.\nAdd or modify a validator (admin only)\nShow the contents of the wallet.\nOperation on the storage.\nSynchronize the local state of the chain with a quorum …\n(DEPRECATED) Synchronize the local state of the chain with …\nSynchronizes a validator with the local state of chains.\nTest a Linera project.\nTransfer funds\nStart a Local Linera Network\nShow the contents of the wallet.\nWatch the network for notifications.\nThe policy for handling incoming messages.\nThe delay when downloading a blob, after which we try a …\nThe maximal number of entries in the storage cache.\nThese applications are allowed to call services as oracles …\nThese applications are allowed to change the application …\nThese applications are allowed to close the current chain …\nSubcommand.\nIf present, only operations from the specified …\nThe age of an incoming tracked or protected message after …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn additional delay, after reaching a quorum, to wait for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(EXPERIMENTAL) Whether application services can persist in …\nThese applications are allowed to make HTTP requests on …\nAt least one operation or incoming message from each of …\nThe maximal number of simultaneous queries to the database\nThe maximal number of chains loaded in memory at a given …\nThe maximum number of incoming message bundles to include …\nNumber of times to retry connecting to a validator.\nThe maximal number of simultaneous stream queries to the …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nTimeout for receiving responses (milliseconds)\nA set of chains to restrict incoming messages from. By …\nDelay increment for retrying to connect to a validator.\nTimeout for sending queries (milliseconds)\nStorage configuration for the blockchain history.\nThe number of Tokio worker threads to use.\nWhether to wait until a quorum of validators has confirmed …\nSets the file storing the private state of user chains (an …\nThe WebAssembly runtime to use.\nGiven an ASCII alphanumeric parameter <code>X</code>, read the wallet …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe account to read, written as <code>CHAIN-ID:OWNER</code> or simply …\nThe account to query, written as <code>CHAIN-ID:OWNER</code> or simply …\nThe account to query, written as <code>CHAIN-ID:OWNER</code> or simply …\nThe public key of the account controlled by the validator.\nThe new validator’s address.\nThe public address of the validator to synchronize.\nNetwork address\nIndex of the admin chain in the genesis config\nAmount to transfer\nThe number of tokens to send to each new chain.\nThe initial balance of the new chain. This is subtracted …\nThe initial balance of the new chain. This is subtracted …\nPath to data blob file to be published.\nSet the base price for creating a block.\nSet the base price for creating a block. (This will …\nIf provided, will be long running, and block proposals …\nSet the price per byte read.\nSet the price per byte read. (This will overwrite value …\nSet the price per byte stored.\nSet the price per byte stored. (This will overwrite value …\nSet the price per byte written.\nSet the price per byte written. (This will overwrite value …\nChain ID (must be one of our chains).\nChain ID (must be one of our chains).\nThe ID of the chain whose owners will be changed.\nThe ID of the chain to which the new permissions will be …\nChain ID (must be one of our chains)\nThe chain to synchronize with validators. If omitted, …\nThe chain to process. If omitted, uses the default chain …\nThe chain to query. If omitted, query the default chain of …\nThe chain to query. If omitted, query the default chain of …\nThe chain ID to watch.\nThe chain that gives away its tokens.\nThe chain with the pending block. If not specified, the …\nThe chains to synchronize, or the default chain if empty.\nIf provided, will close the chains after the benchmark is …\nSets the file describing the public configurations of all …\nConfiguration for the faucet chain listener.\nPath to the Wasm file for the application “contract” …\nPath to the Wasm file for the application “contract” …\nAn optional chain ID to host the application. The default …\nSet the price per unit of fuel.\nSet the price per unit of fuel. (This will overwrite value …\nThe application ID of a fungible token on the wallet’s …\nThe output config path to be consumed by the server\nThe hash of the content.\nA comma-separated list of host:port pairs to query for …\nSet the list of hosts that contracts and services can send …\nKnown initial balance of the chain\nThe instantiation argument as a JSON string.\nThe instantiation argument as a JSON string.\nPath to a JSON file containing the instantiation argument.\nPath to a JSON file containing the instantiation argument.\nThe shared parameters as JSON string.\nThe shared parameters as JSON string.\nPath to a JSON file containing the shared parameters.\nPath to a JSON file containing the shared parameters.\nThe end timestamp: The faucet will rate-limit the token …\nSet the maximum size of data blobs, compressed bytecode …\nSet the maximum size of data blobs, compressed bytecode …\nSet the maximum size of a block proposal, in bytes.\nSet the maximum size of a block proposal, in bytes. (This …\nSet the maximum size of decompressed contract or service …\nSet the maximum size of decompressed contract or service …\nSet the maximum read data per block.\nSet the maximum read data per block. (This will overwrite …\nSet the maximum write data per block.\nSet the maximum write data per block. (This will overwrite …\nSet the maximum size of an executed block, in bytes.\nSet the maximum size of an executed block. (This will …\nSet the maximum amount of fuel per block.\nSet the maximum amount of fuel per block. (This will …\nSet the maximum number of published blobs per block.\nSet the maximum number of published blobs per block. (This …\nSet the base price of sending a message from a block..\nSet the additional price for each byte in the argument of …\nSet the additional price for each byte in the argument of …\nThe ID of the message that created the chain. (This …\nSet the base price of sending a message from a block.. …\nThe module ID of the application to create.\nA unique name to identify this network.\nHow many chains to use for the benchmark\nNumber of initial (aka “root”) chains to create in …\nSet the base price of sending an operation from a block..\nSet the additional price for each byte in the argument of …\nSet the additional price for each byte in the argument of …\nSet the base price of sending an operation from a block.. …\nThe new owner (otherwise create a key pair and remember it)\nThe owner to assign.\nThe source file\nInsert a pause of N seconds after GraphQL queries.\nInsert a pause of N seconds after calls to <code>linera service</code>.\nConfigure the resource control policy (notably fees) …\nThe port on which to run the server\nThe port on which to run the server\nThe public key of the validator. If given, the signature …\nThe public key of the validator.\nThe public key of the validator.\nAn optional chain ID to publish the module. The default …\nAn optional chain ID to publish the blob. The default …\nAn optional chain ID to publish the module. The default …\nShow all notifications from all validators.\nSet the price per read operation.\nSet the price per read operation. (This will overwrite …\nAn optional chain ID to verify the blob. The default chain …\nRecipient account\nThe list of required dependencies of application, if any.\nThe list of required dependencies of application, if any.\nSending chain ID (must be one of our chains)\nPath to the Wasm file for the application “service” …\nPath to the Wasm file for the application “service” …\nSkip the version and genesis config checks.\nThe start timestamp: no blocks can be created before this …\nForce this wallet to generate keys using a PRNG and a …\nHow many tokens to assign to each newly created chain. …\nHow many transactions to put in each block.\nThe virtual machine runtime to use.\nThe virtual machine runtime to use.\nVoting power\nThe maximum number of in-flight requests to validators …\nSet the price per write operation.\nSet the price per write operation. (This will overwrite …\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nStorage configuration for the blockchain history.\nIf this is not set, we’ll build the binaries from within …\nThe name of the docker image to use.\nExternal protocol used, either <code>grpc</code> or <code>grpcs</code>.\nThe number of tokens to send to each new chain created by …\nWhen using –with-faucet, this specifies the chain on …\nThe port on which to run the faucet server\nThe initial amount of native tokens credited in the …\nStart the local network on a local Kubernetes deployment.\nDon’t build docker image. This assumes that the image is …\nThe number of initial “root” chains created in the …\nRun with a specific path where the wallet and validator …\nConfigure the resource control policy (notably fees) …\nThe number of shards per validator in the local test …\nRun with a specific storage. If none, then a …\nForce this wallet to generate keys using a PRNG and a …\nThe number of validators in the local test network. …\nIf present, a faucet is started using the chain provided …\nThe instantiation argument as a JSON string.\nPath to a JSON file containing the instantiation argument.\nThe shared parameters as JSON string.\nPath to a JSON file containing the shared parameters.\nUse the given clone of the Linera repository instead of …\nThe project name. A directory of the same name will be …\nSpecify the name of the Linera project. This is used to …\nThe path of the root of the Linera project. Defaults to …\nAn optional chain ID to publish the module. The default …\nThe list of required dependencies of application, if any.\nThe virtual machine runtime to use.\nThe chain to show the metadata.\nThe chain ID.\nThe address of a faucet.\nThe address of a faucet.\nThe path to the genesis configuration for a Linera …\nPrint only the chains that we have a key pair for.\nWhether this chain should become the default chain.\nOnly print a non-formatted list of the wallet’s chain …\nForce this wallet to generate keys using a PRNG and a …\nRequest a new chain from the faucet, credited with tokens. …\nOther chains to follow.\nThe (public) configuration for all validators.\nThe public configuration of a validator.\nThe private configuration of a validator service.\nThe runtime state of the wallet, persisted atomically on …\nThe account key of the validator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe network configuration for the validator.\nThe public key of the validator.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe <code>Persist</code> trait provides a wrapper around a value that …\nThe <code>Persist</code> trait provides a wrapper around a value that …\nGets a mutable reference to the value. This is not …\nGets a mutable reference to the value. This is not …\nTakes the value out.\nTakes the value out.\nApplies a mutation to the value, persisting when done.\nApplies a mutation to the value, persisting when done.\nSaves the value to persistent storage.\nSaves the value to persistent storage.\nAn implementation of <code>Persist</code> based on an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes the value out, releasing the lock on the persistent …\nCreates a new persistent file at <code>path</code> containing <code>value</code>.\nWrites the value to disk.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads the value from a file at <code>path</code>, returning an error if …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads the value from a file at <code>path</code>, calling the <code>value</code> …\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nA dummy <code>Persist</code> implementation that doesn’t persist …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe DynamoDB key value store\nThe DynamoDB description\nThe memory key value store\nThe memory description\nThe RocksDB key value store\nThe RocksDB description\nThe ScyllaDB key value store\nThe ScyllaDB description\nThe storage service key-value store\nThe storage service description\nThe description of a storage implementation.\nThe description of a storage implementation.\nThe configuration of the key value store in use.\nThe addition of the common config to get a full …\nDeletes all the entries in the database\nDeletes only one table of the database\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all the namespaces of the storage\nLists all the blobs of the storage\nLists all the chain IDs of the storage\nThe namespace used\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nThe storage config\nTest existence of one table in the database\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nThe endpoint used\nThe path used\nWhether to use <code>block_in_place</code> or <code>spawn_blocking</code>.\nThe URI for accessing the database\nWhether to use the LocalStack system\nReturns after the specified time or if we receive a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a user chain that we own.\nCreates an entry for a chain that we don’t own. The …\nReturns the list of all chain IDs for which we have a …\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nReads <code>length</code> bytes from memory from the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.\nWrites the <code>bytes</code> to memory at the provided <code>location</code>.")