searchState.loadedDescShard("pyroscope", 0, "Rust integration for Pyroscope.\nBackend Trait\nBackend Accessibility Trait\nMarker struct for Empty BackendImpl\nBackend Config\nPrecursor Backend Implementation This struct is used to …\nMarker struct for Initialized Backend\nBackend State Trait\nMarker struct for Uninitialized Backend\nAdd a report-splitting rule to the backend.\nAdd a report-splitting rule to the backend\nBackend\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the backend’s configuration.\nReturn the backend configuration\nInitialize the backend.\nInitialize the backend\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new BackendImpl instance\nRemove a report-splitting rule from the backend.\nRemove a report-splitting rule from the backend\nGenerate profiling report\nGenerate profiling report\nGet backend configuration.\nReturn the backend sample rate\nSet the backend’s configuration.\nDrop the backend.\nShutdown the backend and destroy BackendImpl\nBackend name extension\nReturn the backend extension\nBackend Spy Name\nReturn the backend name\nGlobal Tag\nProfiling Rule\nRuleset is a set of rules that can be applied to a …\nThread Tag\nAdd a rule to the ruleset\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of all global tags\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty ruleset\nRemove a rule from the ruleset\nRules vector\nMetdata Metadata attached to a StackTrace or a Report. For …\nReport\nStack buffer\nStackFrame A representation of a stack frame.\nStackTrace A representation of a stack trace.\nPyroscope Tag\nFile absolute path\nAdd a tag to the metadata\nClear the buffer\nClear the report data buffer.\nBuffer data bucket\nReport StackTraces\nFile name\nStack Trace\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the id of the metadata. This uses the hash of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn an iterator over the StackTraces of the Report.\nReturn an iterator over the frames of the stacktrace.\nTag key\nLine number\nSet the metadata of the report.\nMetadata\nMetadata\nModule name\nFunction name\nCreate a new Tag\nCreate a new StackBuffer with the given data\nCreate a new Report.\nCreate a new StackTrace\nCreate a new StackFrame.\nProcess ID\nRecord a new stack trace\nRecord a new stack trace.\nRecord a new stack trace with count\nRecord a new stack trace with count.\nFile relative path\nTags\nThread ID\nThread Name\nTag value\nEmpty Backend implementation for Testing purposes\nAdd a Rule to the Backend.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the configuration.\nInitialize the Backend.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new VoidConfig\nCreate a new VoidBackend\nRemove a Rule from the Backend.\nGenerate a report.\nSet the sample rate\nReturn the set sample rate.\nSet the configuration.\nShutdown the Backend.\nReturn the Backend extension.\nReturn the Backend name.\nA Backend implementation for testing purposes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescribes function and line table debug information.\nEach Sample records values encountered in some program …\nValueType describes the semantics and measurement units of …\nThe instruction address for this location, if available.  …\nA string that uniquely identifies a particular program …\nFreeform text associated to the profile.\nIndex into the string table of the type of the preferred …\nframes with Function.function_name fully matching the …\nDuration of the profile, if a duration makes sense.\nOffset in the binary that corresponds to the first mapped …\nThe object this entry is loaded from.  This can be a …\nSource file containing the function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunctions referenced by locations\nThe id of the corresponding profile.Function for this line.\nThe following fields indicate the resolution of symbolic …\nUnique nonzero id for the mapping.\nUnique nonzero id for the location.  A profile could use …\nUnique nonzero id for the function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvides an indication that multiple symbols map to this …\nframes with Function.function_name fully matching the …\nIndex into string table\nlabel includes additional context for this sample. It can …\nMultiple line indicates this location has inlined …\nLine number in source code.\nUseful program location\nThe ids recorded here correspond to a Profile.location.id. …\nMapping from address ranges to the image/binary/library …\nThe id of the corresponding profile.Mapping for this …\nThe limit of the address range occupied by this mapping.\nAddress at which the binary (or DLL) is loaded into memory.\nName of the function, in human-readable form if available.\nShould only be present when num is present. Specifies the …\nThe number of events between sampled occurrences.\nThe kind of events between sampled ocurrences. e.g [ “cpu…\nThe set of samples recorded in this profile.\nA description of the samples associated with each …\nLine number in source file.\nAt most one of the following must be present\nA common table for strings referenced by various messages. …\nName of the function, as identified by the system. For …\nTime of collection (UTC) represented as nanoseconds past …\nIndex into string table.\nIndex into string table.\nThe type and unit of each value is defined by the …\nContains the error value\nContains the success value\nError type of Pyroscope\nResult Alias with PyroscopeError\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new instance of PyroscopeError\nCreate a new instance of PyroscopeError with source\nPyroscopeAgent is the main object of the library. It is …\nMarker struct for an Uninitialized state.\nPyroscopeAgent Builder\nMarker struct for a Ready state.\nMarker struct for a Running state.\nThis trait is used to encode the state of the agent.\nPyroscope Agent Configuration. This is the configuration …\nAdd a global Tag rule to the backend Ruleset. For tagging, …\nAdd a thread Tag rule to the backend Ruleset. For tagging, …\nSet the Application Name. This can be used if the Builder …\nApplication Name\nSet JWT authentication token. This is optional. If not …\nAuthentication Token\nSet the agent backend. Default is void-backend.\nProfiler backend\nInitialize the backend, timer and return a PyroscopeAgent …\nShort-hand for PyroscopeAgentBuilder::new(url, …\nSet the http request body compression.\nSet the http request body compression.\nPyroscope http request body compression\nConfiguration Object\nShort-hand for PyroscopeAgentBuilder::default(). This is a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the Function. This is optional. If not set, the agent …\nSet the Function.\nFunction to apply\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new PyroscopeAgentBuilder object. url and …\nCreate a new PyroscopeConfig object. url and …\nRemove a global Tag rule from the backend Ruleset. For …\nRemove a thread Tag rule from the backend Ruleset. For …\nSet the Sample rate.\nSample Rate\nProperly shutdown the agent.\nSet the Spy Name.\nSpy Name\nStart profiling and sending data. The agent will keep …\nStop the agent. The agent will stop profiling and send a …\nReturn a tuple of functions to add and remove tags to the …\nSet tags. Default is empty.\nSet the tags.\nTags\nSet the Pyroscope Server URL. This can be used if the …\nPyroscope Server Address\nKill the session thread.\nPyroscope Session\nSend session data to the session thread.\nManage sessions and send data to the server.\nSession Signal\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe SessionManager thread.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SessionManager\nCreate a new Session\nPush a new session into the SessionManager\nSend the session to the server and consumes the session …\nChannel to send data to the SessionManager thread.\nA signal sent to the timer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA thread that sends a notification every 10th second\nAttach an mpsc::Sender to Timer\nClear the listeners (txs) from Timer. This will shutdown …\nlibc::epoll_create1 wrapper\nlibc::epoll_ctl wrapper\nlibc::epoll_wait wrapper\nReturns the argument unchanged.\nThread handle\nInitialize Timer and run a thread to send events to …\nCalls <code>U::from(self)</code>.\nlibc::read wrapper\nWrapper for libc functions.\nlibc::timerfd_settime wrapper")