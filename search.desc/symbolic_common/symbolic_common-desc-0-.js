searchState.loadedDescShard("symbolic_common", 0, "Common functionality for <code>symbolic</code>.\nValues supported by <code>ByteView::hint</code>.\n64-bit little-endian, also known as <code>x86_64</code>, now widely …\nAn enumeration of CPU architectures and variants.\n32-bit ARM.\n64-bit ARM (e.g. ARMv8-A).\nILP32 ABI on 64-bit ARM.\nSafe downcasting of dependent lifetime bounds on structs.\nWrapper around <code>DebugId</code> for Breakpad formatting.\nA smart pointer for byte data.\nUnique platform-dependent identifier of code files.\nRepresents a family of CPUs.\nExtensions to <code>Path</code> for handling <code>dSYM</code> directories.\nUnique identifier for debug information files and their …\nHelper to work with instruction addresses.\n32-bit little-endian CPUs using the Intel 8086 instruction …\nA programming language declared in debugging information.\nThe <code>Name</code> is definitely mangled.\n32-bit MIPS.\n64-bit MIPS.\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nThe name of a potentially mangled symbol.\nA <code>Name</code>s mangling state.\nNo special treatment.\nIndicates an error parsing a <code>CodeId</code>.\nIndicates an error parsing a <code>DebugId</code>.\n32-bit big-endian PowerPC.\n64-bit big-endian PowerPC.\nExpect access to be random.\nThe <code>Self</code> type with <code>&#39;slf</code> lifetimes, returned by <code>as_self</code>.\nA container carrying a derived object alongside its owner.\nExpect access to be in sequential order, read ahead might …\nA structure mapping source file paths to remote locations.\nAn unsafe marker trait for types that deref to a stable …\nAny other CPU family that is not explicitly supported.\nThe mangling of the <code>Name</code> is not known.\nAn error returned for an invalid <code>Arch</code>.\nAn error returned for an invalid <code>Language</code>.\nThe <code>Name</code> is not mangled.\nA Universally Unique Identifier (UUID).\nVirtual WASM 32-bit architecture.\nTries to resolve the start address of the current …\nReturns the appendix part of the code module’s debug …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nReturns a reference to <code>self</code> with downcasted lifetime.\nGet a borrowed <code>Simple</code> formatter.\nReturns a slice of the underlying data.\nReturns the string representation of this code identifier.\nReturns the raw, mangled string of the name.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a <code>Braced</code> formatter.\nReturns a wrapper which when formatted via <code>fmt::Display</code> …\nDetermines the address of the call site based on a return …\nSimplifies paths by stripping redundant components.\nReturns the CPU family of the CPU architecture.\nResolves the <code>dSYM</code> parent directory if this file is a dSYM.\nA buffer that can be used for <code>encode_...</code> calls, that is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>CodeId</code> from a binary slice.\nParses a breakpad identifier from a string.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nConstructs a <code>ByteView</code> from a <code>Cow</code>.\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nConstructs a <code>DebugId</code> from a Microsoft little-endian GUID …\nConstructs a <code>DebugId</code> from its <code>uuid</code> and <code>appendix</code> parts.\nConstructs a <code>DebugId</code> from a PDB 2.0 timestamp and age.\nUnsafely creates a new <code>SelfCell</code> from a derived object by …\nConstructs a <code>ByteView</code> from a byte slice.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates an <code>Arch</code> from its <code>u32</code> representation.\nCreates an <code>Language</code> from its <code>u32</code> representation.\nCreates a UUID from two 64bit values.\nConstructs a <code>DebugId</code> from its <code>uuid</code>.\nConstructs a <code>ByteView</code> from a vector of bytes.\nReturns a safe reference to the derived object in this …\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nApplies a <code>AccessPattern</code> hint to the backing storage.\nGet a <code>Hyphenated</code> formatter.\nReturns instruction alignment if fixed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes self and returns the underlying byte value of the …\nConverts this name into a <code>Cow</code>.\nConverts this name into a <code>String</code>.\nReturns the name of the instruction pointer register.\nSets the value of the instruction pointer register.\nReturns whether the application attempted to jump to an …\nMarks this as the crashing frame.\nReturns <code>true</code> if this path points to an existing directory …\nReturns true if this structure contains no mappings.\nTests if the UUID is max (all ones).\nReturns whether this identifier is nil, i.e. it consists …\nReturns whether this identifier is nil, i.e. it is empty.\nTests if the UUID is nil (all zeros).\nReturns whether this identifier is from the PDB 2.0 format.\nJoins paths of various platforms.\nThe language of the mangled symbol.\nReturns the <code>Name</code>’s mangling state.\nConstructs a <code>ByteView</code> from an open file handle by memory …\nConstructs a <code>ByteView</code> from an open file handle by memory …\nThe ‘max UUID’ (all ones).\nReturns the canonical name of the CPU architecture.\nReturns the name of the language.\nConstructs a <code>CodeId</code> from its string representation.\nCreates a new <code>SelfCell</code>.\nCreates a new instruction info instance.\nCreates a <code>SourceLinkMappings</code> struct from an iterator of …\nConstructs a new Name with given mangling and language.\nCreates a UUID using a name from a namespace, based on the …\nCreates a random UUID.\nConstructs an empty debug identifier, containing only …\nConstructs an empty code identifier.\nThe ‘nil UUID’ (all zeros).\nConstructs a <code>ByteView</code> from a file path by memory mapping …\nReturns a reference to the owner of this cell.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nReturns the native pointer size.\nReturns the instruction preceding the current one.\nConstructs a <code>ByteView</code> from any <code>std::io::Reader</code>.\nResolve the path to a URL.\nResolves the path of the debug file in a <code>dSYM</code> directory …\nSet the <code>Name</code>’s language.\nSet the <code>Name</code>’s mangling state.\nTrims a path to a given length.\nDetermines whether the given address should be adjusted to …\nSets a POSIX signal number.\nGet a <code>Simple</code> formatter.\nSplits off the last component of a path.\nSplits off the last component of a path given as bytes.\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nCreates a new <code>SelfCell</code> which may fail to construct.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nGet a <code>Urn</code> formatter.\nReturns the UUID part of the code module’s …\nReturns whether this architecture is well-known.")